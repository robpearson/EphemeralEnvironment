name = "Provision test environment"
default_guided_failure_mode = "EnvironmentDefault"
description = ""

connectivity_policy {
    allow_deployments_to_no_targets = true
}

run_retention_policy {
    quantity_to_keep = 100
}

process {
    step "create-namespace-if-it-doesn-t-exist" {
        name = "Create namespace if it doesn't exist"
        properties = {
            Octopus.Action.TargetRoles = "platform-k8s"
        }

        action {
            action_type = "Octopus.KubernetesRunScript"
            properties = {
                Octopus.Action.Script.ScriptBody = <<-EOT
                    # Set varaibles
                    $clusterNamespace = "#{B2B.Cluster.Namespace}"
                    
                    # Get existing namespaces
                    Write-Host "Retrieving namespaces ..."
                    $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                    
                    # Check to see if namespace exists
                    if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $clusterNamespace}))
                    {
                    	# Create the namespace
                        Write-Host "Namespace $clusterNamespace doesn't exist, creating ..."
                        kubectl create namespace $clusterNamespace
                    }
                    else
                    {
                    	Write-Host "Namespace $clusterNamespace already exists, moving on ..."
                    }
                    EOT
                Octopus.Action.Script.ScriptSource = "Inline"
                Octopus.Action.Script.Syntax = "PowerShell"
            }
            worker_pool = "hosted-windows"
            worker_pool_variable = ""
        }
    }

    step "update-service" {
        name = "Update Service"
        properties = {
            Octopus.Action.TargetRoles = "platform-k8s"
        }

        action {
            action_type = "Octopus.KubernetesDeployRawYaml"
            properties = {
                Octopus.Action.Kubernetes.DeploymentTimeout = "180"
                Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
                Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
                Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
                Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                    apiVersion: v1
                    kind: Service
                    metadata:
                      name: '#{B2B.WebApp.ServiceName}'
                      namespace: '#{B2B.Cluster.Namespace}'
                    spec:
                      type: LoadBalancer
                      ports:
                        - name: http
                          port: 80
                          targetPort: #{B2B.WebApp.HttpPort}
                          protocol: TCP
                        - name: https
                          port: 443
                          targetPort: #{B2B.WebApp.HttpsPort}
                          protocol: TCP
                      selector:
                        component: g-web
                        type: main
                    
                    EOT
                Octopus.Action.KubernetesContainers.Namespace = "#{B2B.Cluster.Namespace}"
                Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
                Octopus.Action.Script.ScriptSource = "Inline"
            }
            worker_pool = "hosted-windows"
            worker_pool_variable = ""
        }
    }
}